const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys');
const mongoose = require('mongoose');


// we load the User as a model class in mongoose, we can use this model class to create model instance
const User = mongoose.model('users');    

// the user is what we just pulled out of the database
passport.serializeUser((user, done) => {
    done(null, user.id);            // user.id is not goolgeId, but the user modle instance id generated by Mongo
});

passport.deserializeUser((id, done) => {
    User.findById(id).then((user) => {
        done(null, user);
    });
});

//load the GoogleStrategy middleware to passport
passport.use(
    new GoogleStrategy(
        {
            clientID: keys.googleClinetID,
            clientSecret: keys.googleClientSecret,
            callbackURL: '/auth/google/callback',
            proxy: true    // trust the proxy and calculate the callback url correctly, do not make https back to http
        }, 
        async (accessToken, refreshToken, profile, done) => {
            // find if there exists an user whose id is exactly the id of current user profile

            // MongoDB query returns a promise, promise is used to handle asynchronise code in javascript
            // by using the promise, we can't do like: const user = User.findOne(...)
            // we can use .then to revoke a callback function with the returned user as one parameter
            const existingUser = await User.findOne({ googleId: profile.id });
            if (existingUser) 
                // we already have a record with the given profile id
                return done(null, existingUser);   // first para is the error message, we have found the user, so the err would be null
            // we dont have a user record with this id, make a new record
            const user = await new User({ googleId: profile.id }).save()
            done(null, user);
                        // why use .save(): 
                        //     if we do not call .save() method, we create a model instance,
                        //     but it only exists in the javascript, we have to persiste this instance to our database
                        //     so we use .save() method to achieve persistence between model and database
        }
    )
);